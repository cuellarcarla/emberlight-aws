{"ast":null,"code":"import{API_BASE_URL}from'../config';import React,{useEffect,useState}from'react';import{useAuth}from'../contexts/AuthContext';import{getCookie}from'../utils/cookies';import ChatLayout from'../pages/ChatLayout';import Sidebar from'../components/Sidebar';import Chat from'../pages/Chat';import{jsx as _jsx}from\"react/jsx-runtime\";function ChatPage(){const{user}=useAuth();const[sessions,setSessions]=useState([]);const[activeSession,setActiveSession]=useState(null);const[chatHistory,setChatHistory]=useState([]);const[message,setMessage]=useState('');const[loading,setLoading]=useState(false);const[initialized,setInitialized]=useState(false);// Initialize chat sessions\nuseEffect(()=>{if(!user||initialized)return;const initializeChat=async()=>{try{const res=await fetch(`${API_BASE_URL}/geminiapi/sessions/`,{credentials:\"include\",headers:{\"Content-Type\":\"application/json\",\"X-CSRFToken\":getCookie(\"csrftoken\")}});const data=await res.json();if(data.length>0){setSessions(data);setActiveSession(data[0].id);}setInitialized(true);}catch(err){console.error(\"Failed to load sessions:\",err);}};initializeChat();},[user,initialized]);// Load chat history when session changes\nuseEffect(()=>{if(!activeSession)return;const fetchHistory=async()=>{try{const res=await fetch(`${API_BASE_URL}/geminiapi/sessions/${activeSession}/`,{credentials:\"include\",headers:{\"Content-Type\":\"application/json\",\"X-CSRFToken\":getCookie(\"csrftoken\")}});const data=await res.json();setChatHistory(data.logs||[]);}catch(err){console.error(\"Failed to load chat history:\",err);}};fetchHistory();},[activeSession]);const handleSubmit=async e=>{e.preventDefault();if(!message.trim())return;setLoading(true);try{let sessionId=activeSession;// Create new session if none exists\nif(!sessionId){const newSessionRes=await fetch(`${API_BASE_URL}/geminiapi/sessions/new/`,{method:\"POST\",credentials:\"include\",headers:{\"Content-Type\":\"application/json\",\"X-CSRFToken\":getCookie(\"csrftoken\")},body:JSON.stringify({title:message.substring(0,30)})});const newSession=await newSessionRes.json();setSessions([newSession,...sessions]);setActiveSession(newSession.id);sessionId=newSession.id;}// Send message\nconst res=await fetch(`${API_BASE_URL}/geminiapi/sessions/${sessionId}/chat/`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"X-CSRFToken\":getCookie(\"csrftoken\")},credentials:\"include\",body:JSON.stringify({message})});const data=await res.json();if(res.ok){setChatHistory(prev=>[...prev,{message,response:data.response}]);setMessage('');}}catch(err){console.error(\"Chat request failed:\",err);}setLoading(false);};const createNewSession=()=>{// Just reset the UI state for a new chat\n// We dont need to create a new session directly, only after user has typed a message\nsetActiveSession(null);setChatHistory([]);setMessage('');};return/*#__PURE__*/_jsx(ChatLayout,{sidebar:/*#__PURE__*/_jsx(Sidebar,{sessions:sessions,activeSession:activeSession,onSelectSession:setActiveSession,onCreateSession:createNewSession,onDeleteSession:deletedSessionId=>{setSessions(sessions.filter(s=>s.id!==deletedSessionId));if(activeSession===deletedSessionId){setActiveSession(null);setChatHistory([]);}}}),chatContent:/*#__PURE__*/_jsx(Chat,{history:chatHistory,loading:loading,onSubmit:handleSubmit,message:message,setMessage:setMessage})});}export default ChatPage;","map":{"version":3,"names":["API_BASE_URL","React","useEffect","useState","useAuth","getCookie","ChatLayout","Sidebar","Chat","jsx","_jsx","ChatPage","user","sessions","setSessions","activeSession","setActiveSession","chatHistory","setChatHistory","message","setMessage","loading","setLoading","initialized","setInitialized","initializeChat","res","fetch","credentials","headers","data","json","length","id","err","console","error","fetchHistory","logs","handleSubmit","e","preventDefault","trim","sessionId","newSessionRes","method","body","JSON","stringify","title","substring","newSession","ok","prev","response","createNewSession","sidebar","onSelectSession","onCreateSession","onDeleteSession","deletedSessionId","filter","s","chatContent","history","onSubmit"],"sources":["/home/ubuntu/EmberLight_Projecte2/frontend/src/pages/ChatPage.js"],"sourcesContent":["import { API_BASE_URL } from '../config';\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { getCookie } from '../utils/cookies';\nimport ChatLayout from '../pages/ChatLayout';\nimport Sidebar from '../components/Sidebar';\nimport Chat from '../pages/Chat';\n\nfunction ChatPage() {\n  const { user } = useAuth();\n  const [sessions, setSessions] = useState([]);\n  const [activeSession, setActiveSession] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n\n  // Initialize chat sessions\n  useEffect(() => {\n    if (!user || initialized) return;\n\n    const initializeChat = async () => {\n      try {\n        const res = await fetch(`${API_BASE_URL}/geminiapi/sessions/`, {\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\n          },\n        });\n        const data = await res.json();\n        \n        if (data.length > 0) {\n          setSessions(data);\n          setActiveSession(data[0].id);\n        }\n        setInitialized(true);\n      } catch (err) {\n        console.error(\"Failed to load sessions:\", err);\n      }\n    };\n\n    initializeChat();\n  }, [user, initialized]);\n\n  // Load chat history when session changes\n  useEffect(() => {\n    if (!activeSession) return;\n\n    const fetchHistory = async () => {\n      try {\n        const res = await fetch(`${API_BASE_URL}/geminiapi/sessions/${activeSession}/`, {\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\n          },\n        });\n        const data = await res.json();\n        setChatHistory(data.logs || []);\n      } catch (err) {\n        console.error(\"Failed to load chat history:\", err);\n      }\n    };\n\n    fetchHistory();\n  }, [activeSession]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    setLoading(true);\n\n    try {\n      let sessionId = activeSession;\n      \n      // Create new session if none exists\n      if (!sessionId) {\n        const newSessionRes = await fetch(`${API_BASE_URL}/geminiapi/sessions/new/`, {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": getCookie(\"csrftoken\"),\n          },\n          body: JSON.stringify({ title: message.substring(0, 30) }),\n        });\n        const newSession = await newSessionRes.json();\n        setSessions([newSession, ...sessions]);\n        setActiveSession(newSession.id);\n        sessionId = newSession.id;\n      }\n\n      // Send message\n      const res = await fetch(`${API_BASE_URL}/geminiapi/sessions/${sessionId}/chat/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": getCookie(\"csrftoken\"),\n        },\n        credentials: \"include\",\n        body: JSON.stringify({ message }),\n      });\n\n      const data = await res.json();\n\n      if (res.ok) {\n        setChatHistory(prev => [...prev, { message, response: data.response }]);\n        setMessage('');\n      }\n    } catch (err) {\n      console.error(\"Chat request failed:\", err);\n    }\n\n    setLoading(false);\n  };\n\n  const createNewSession = () => {\n    // Just reset the UI state for a new chat\n    // We dont need to create a new session directly, only after user has typed a message\n    setActiveSession(null);\n    setChatHistory([]);\n    setMessage('');\n  };\n\n  return (\n    <ChatLayout\n      sidebar={\n        <Sidebar\n          sessions={sessions}\n          activeSession={activeSession}\n          onSelectSession={setActiveSession}\n          onCreateSession={createNewSession}\n          onDeleteSession={(deletedSessionId) => {\n            setSessions(sessions.filter(s => s.id !== deletedSessionId));\n            if (activeSession === deletedSessionId) {\n              setActiveSession(null);\n              setChatHistory([]);\n            }\n          }}\n        />\n      }\n      chatContent={\n        <Chat\n          history={chatHistory}\n          loading={loading}\n          onSubmit={handleSubmit}\n          message={message}\n          setMessage={setMessage}\n        />\n      }\n    />\n  );\n}\n\nexport default ChatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}