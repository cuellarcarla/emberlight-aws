{"ast":null,"code":"import React,{useRef,useEffect}from'react';import{format}from'date-fns';// Moods. First value: matches the database value. Must match the value from the django model.\n// Second value: display for user visualization\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MOODS=[['feliz','😊'],['neutral','😐'],['triste','😢'],['enojado','😠'],['ansioso','😰']];function WeekView(_ref){let{entries,weekDates,editingDate,currentMood,setCurrentMood,handleSave,startEditing,handleDeleteEntry,setEditingDate}=_ref;const textareaRef=useRef(null);// Check whenever we start editing the text area so the user can type or not.\nuseEffect(()=>{if(editingDate){var _textareaRef$current;(_textareaRef$current=textareaRef.current)===null||_textareaRef$current===void 0?void 0:_textareaRef$current.focus();}},[editingDate]);const toLocalDateString=date=>format(date,'yyyy-MM-dd');return/*#__PURE__*/_jsx(\"div\",{className:\"sticky-notes-container\",children:// We map the seven sticky notes (entries) of the current week\nweekDates.map(date=>{const dateStr=toLocalDateString(date);const entry=entries.find(e=>e.date===dateStr);const isEditing=editingDate===dateStr;return(/*#__PURE__*/// We display the header with format: Day of the week (Ex: Martes) and Day of the month (Ex: 14)\n_jsxs(\"div\",{className:`sticky-note ${entry?entry.mood:'empty'}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sticky-header\",style:{color:\"#5F7F71\"},children:[date.toLocaleDateString('es-ES',{weekday:'long'}),/*#__PURE__*/_jsx(\"div\",{className:\"sticky-date\",style:{color:\"#5F7F71\"},children:date.getDate()}),/*#__PURE__*/_jsx(\"button\",{className:\"delete-entry-btn\",onClick:e=>{e.stopPropagation();if(entry){if(window.confirm('¿Estás seguro de que quieres eliminar esta entrada?')){handleDeleteEntry(entry.id);}}else{alert('No hay ninguna entrada para eliminar en esta fecha.');}},title:entry?\"Eliminar entrada\":\"No hay entrada para eliminar\"})]}),isEditing?/*#__PURE__*/_jsxs(\"div\",{className:\"sticky-edit\",children:[\" \",/*#__PURE__*/_jsx(\"textarea\",{ref:textareaRef,defaultValue:(entry===null||entry===void 0?void 0:entry.text)||'',placeholder:\"Escribe tus emociones...\",\"data-date\":toLocalDateString(date)}),/*#__PURE__*/_jsx(\"div\",{className:\"mood-selector\",children:MOODS.map(_ref2=>{let[value,emoji]=_ref2;return/*#__PURE__*/_jsx(\"span\",{className:currentMood===value?'selected':'',onClick:()=>setCurrentMood(value),title:value.charAt(0).toUpperCase()+value.slice(1),children:emoji},value);})}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSave(date),className:\"save-button\",children:\"Guardar\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setEditingDate(null),className:\"cancel-button\",children:\"Cancelar\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"sticky-content\",children:[\" \",/*#__PURE__*/_jsx(\"p\",{children:(entry===null||entry===void 0?void 0:entry.text)||'Escribe tus emociones...'}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>startEditing(date,entry),className:\"edit-button\",children:entry?'Editar':'Crear Entrada'})]})]},dateStr));})});}export default WeekView;","map":{"version":3,"names":["React","useRef","useEffect","format","jsx","_jsx","jsxs","_jsxs","MOODS","WeekView","_ref","entries","weekDates","editingDate","currentMood","setCurrentMood","handleSave","startEditing","handleDeleteEntry","setEditingDate","textareaRef","_textareaRef$current","current","focus","toLocalDateString","date","className","children","map","dateStr","entry","find","e","isEditing","mood","style","color","toLocaleDateString","weekday","getDate","onClick","stopPropagation","window","confirm","id","alert","title","ref","defaultValue","text","placeholder","_ref2","value","emoji","charAt","toUpperCase","slice"],"sources":["/home/ubuntu/EmberLight_Projecte2/frontend/src/pages/WeekView.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { format } from 'date-fns';\n\n// Moods. First value: matches the database value. Must match the value from the django model.\n// Second value: display for user visualization\nconst MOODS = [\n  ['feliz', '😊'],\n  ['neutral', '😐'],\n  ['triste', '😢'],\n  ['enojado', '😠'],\n  ['ansioso', '😰'],\n];\n\nfunction WeekView({ entries, weekDates, editingDate, currentMood, setCurrentMood, handleSave, startEditing, handleDeleteEntry, setEditingDate }) {\n  const textareaRef = useRef(null);\n\n  // Check whenever we start editing the text area so the user can type or not.\n  useEffect(() => {\n    if (editingDate) {\n      textareaRef.current?.focus();\n    }\n  }, [editingDate]);\n\n  const toLocalDateString = date => format(date, 'yyyy-MM-dd');\n\n  return (\n    <div className=\"sticky-notes-container\">\n      { // We map the seven sticky notes (entries) of the current week\n        weekDates.map((date) => {\n        const dateStr = toLocalDateString(date);\n        const entry = entries.find(e => e.date === dateStr);\n        const isEditing = editingDate === dateStr;\n\n        return (\n          // We display the header with format: Day of the week (Ex: Martes) and Day of the month (Ex: 14)\n          <div key={dateStr} className={`sticky-note ${entry ? entry.mood : 'empty'}`}>\n            <div className=\"sticky-header\" style={{ color: \"#5F7F71\" }}>\n              {date.toLocaleDateString('es-ES', { weekday: 'long' })}\n              <div className=\"sticky-date\" style={{ color: \"#5F7F71\" }}>{date.getDate()}</div>\n              <button \n                className=\"delete-entry-btn\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  if (entry) {\n                    if (window.confirm('¿Estás seguro de que quieres eliminar esta entrada?')) {\n                      handleDeleteEntry(entry.id);\n                    }\n                  } else {\n                    alert('No hay ninguna entrada para eliminar en esta fecha.');\n                  }\n                }}\n                title={entry ? \"Eliminar entrada\" : \"No hay entrada para eliminar\"}\n              />\n            </div>\n\n            {isEditing ? (\n              <div className=\"sticky-edit\"> {/* If the user is editing... */}\n                {/* We display the text area */}\n                <textarea\n                  ref={textareaRef}\n                  defaultValue={entry?.text || ''}\n                  placeholder=\"Escribe tus emociones...\"\n                  data-date={toLocalDateString(date)}\n                />\n                {/* We display the mood selector area */}\n                <div className=\"mood-selector\">\n                  {MOODS.map(([value, emoji]) => (\n                    <span\n                      key={value}\n                      className={currentMood === value ? 'selected' : ''}\n                      onClick={() => setCurrentMood(value)}\n                      title={value.charAt(0).toUpperCase() + value.slice(1)}\n                    >\n                      {emoji}\n                    </span>\n                  ))}\n                </div>\n                {/* We display the Save Button */}\n                <div className=\"button-group\">\n                  <button onClick={() => handleSave(date)} className=\"save-button\">\n                    Guardar\n                  </button>\n                  <button \n                    onClick={() => setEditingDate(null)} \n                    className=\"cancel-button\"\n                  >\n                    Cancelar\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"sticky-content\"> {/* If the user is NOT editing... */}\n                <p>{entry?.text || 'Escribe tus emociones...'}</p>\n                {/* We display an Edit or Add Entry button, based on if the entry exists in the DB */}\n                <button onClick={() => startEditing(date, entry)} className=\"edit-button\">\n                  {entry ? 'Editar' : 'Crear Entrada'}\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default WeekView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}