{"ast":null,"code":"import{API_BASE_URL}from'../config';import React,{useState,useEffect}from'react';import{format,startOfWeek,addDays}from'date-fns';import{useAuth}from'../contexts/AuthContext';import{getCookie}from\"../utils/cookies\";import'./JournalPage.css';import WeekView from'./WeekView';import CalendarView from'./CalendarView';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function JournalPage(){const{user}=useAuth();const[entries,setEntries]=useState([]);const[selectedDate,setSelectedDate]=useState(null);const[viewMode,setViewMode]=useState('week');const[editingDate,setEditingDate]=useState(null);const[currentMood,setCurrentMood]=useState('neutral');// Get the days of the week (Mon to Sun) where the current day(the day the user is viewing the website) belongs\nconst getWeekDates=()=>{const monday=startOfWeek(new Date(),{weekStartsOn:1});// Return the start of a week for the given date, week starts on Monday\nreturn Array.from({length:7},(_,dayIndex)=>addDays(monday,dayIndex));};// Format the dates for easy reading\nconst toLocalDateString=date=>format(date,'yyyy-MM-dd');useEffect(()=>{if(!user)return;// Retrieve the journal entries of the current user.\n// Note: Entries are retrieved only for the last 30 days and for the logged user.\n// This functionality is handled by the Django endpoint + sessions.\nconst fetchEntries=async()=>{try{const response=await fetch(`${API_BASE_URL}/journal/entries/`,{credentials:'include',headers:{\"Content-Type\":\"application/json\",'X-CSRFToken':getCookie('csrftoken')}});const data=await response.json();setEntries(data);// Store fetched entries to \"entries\" useState([]) array\n}catch(error){console.error('Error fetching entries:',error);}};fetchEntries();},[user]);const handleSave=async date=>{const dateStr=toLocalDateString(date);// Get the date of the entry we're trying to store\nconst textarea=document.querySelector(`textarea[data-date=\"${dateStr}\"]`);// Get the text from textarea\nconst text=(textarea===null||textarea===void 0?void 0:textarea.value)||'';// To prevent null in text area after saving\nconst existingEntry=entries.find(e=>e.date===dateStr);// Check if the date of that entry has already one entry stored in the DB\n// When pressing \"Save\" to store the entry to the DB, we check the fetched\n// entries to see if we stored the entry, of that specific date, previously to the DB.\n// Basically:\n// If the entry exists in the DB -> Edit the entry with PUT\n// If the entry doesn't exist in the DB -> Create a new entry with POST\ntry{let response;if(existingEntry){// Update existing entry (PATCH)\nresponse=await fetch(`${API_BASE_URL}/journal/entries/${existingEntry.id}/update/`,{method:'PATCH',headers:{'Content-Type':'application/json','X-CSRFToken':getCookie('csrftoken')},credentials:'include',body:JSON.stringify({mood:currentMood,text})});}else{// Create new entry (POST)\nresponse=await fetch(`${API_BASE_URL}/journal/entries/create/`,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':getCookie('csrftoken')},credentials:'include',body:JSON.stringify({date:dateStr,mood:currentMood,text})});}if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const savedEntry=await response.json();// Again, if the entry already existed in the DB, we check our\n// entries array and update it (if the entry existed) or append it if the entry is new\nsetEntries(prev=>existingEntry?prev.map(e=>e.id===savedEntry.id?savedEntry:e):[savedEntry,...prev]);setEditingDate(null);// Finish editing the entry text\n}catch(error){console.error('Error saving entry:',error);}};const handleDeleteEntry=async entryId=>{try{const response=await fetch(`${API_BASE_URL}/journal/entries/${entryId}/delete/`,{method:'DELETE',headers:{'Content-Type':'application/json','X-CSRFToken':getCookie('csrftoken')},credentials:'include'});if(response.ok){setEntries(prev=>prev.filter(e=>e.id!==entryId));if(editingDate)setEditingDate(null);}}catch(error){console.error('Error deleting entry:',error);}};const startEditing=(date,entry)=>{setEditingDate(format(date,'yyyy-MM-dd'));setCurrentMood((entry===null||entry===void 0?void 0:entry.mood)||'neutral');};return/*#__PURE__*/_jsx(\"div\",{className:\"journal-page-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"journal-container\",children:[/*#__PURE__*/_jsx(\"h1\",{style:{color:\"#2F5D46\"},children:\"Tu Diario Mental\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:viewMode==='week'?'active':'',onClick:()=>setViewMode('week'),children:\"Semanal\"}),/*#__PURE__*/_jsx(\"button\",{className:viewMode==='calendar'?'active':'',onClick:()=>setViewMode('calendar'),children:\"Calendario\"})]}),viewMode==='week'&&/*#__PURE__*/_jsx(WeekView,{entries:Array.isArray(entries)?entries:[],weekDates:getWeekDates(),editingDate:editingDate,currentMood:currentMood,setCurrentMood:setCurrentMood,handleSave:handleSave,startEditing:startEditing,handleDeleteEntry:handleDeleteEntry,setEditingDate:setEditingDate}),viewMode==='calendar'&&/*#__PURE__*/_jsx(CalendarView,{entries:entries,selectedDate:selectedDate,setSelectedDate:setSelectedDate})]})});}export default JournalPage;","map":{"version":3,"names":["API_BASE_URL","React","useState","useEffect","format","startOfWeek","addDays","useAuth","getCookie","WeekView","CalendarView","jsx","_jsx","jsxs","_jsxs","JournalPage","user","entries","setEntries","selectedDate","setSelectedDate","viewMode","setViewMode","editingDate","setEditingDate","currentMood","setCurrentMood","getWeekDates","monday","Date","weekStartsOn","Array","from","length","_","dayIndex","toLocalDateString","date","fetchEntries","response","fetch","credentials","headers","data","json","error","console","handleSave","dateStr","textarea","document","querySelector","text","value","existingEntry","find","e","id","method","body","JSON","stringify","mood","ok","Error","status","savedEntry","prev","map","handleDeleteEntry","entryId","filter","startEditing","entry","className","children","style","color","onClick","isArray","weekDates"],"sources":["/home/ubuntu/EmberLight_Projecte2/frontend/src/pages/JournalPage.js"],"sourcesContent":["import { API_BASE_URL } from '../config';\nimport React, { useState, useEffect } from 'react';\nimport { format, startOfWeek, addDays } from 'date-fns';\nimport { useAuth } from '../contexts/AuthContext';\nimport { getCookie } from \"../utils/cookies\";\nimport './JournalPage.css';\nimport WeekView from './WeekView';\nimport CalendarView from './CalendarView';\n\nfunction JournalPage() {\n  const { user } = useAuth();\n  const [entries, setEntries] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [viewMode, setViewMode] = useState('week');\n  const [editingDate, setEditingDate] = useState(null);\n  const [currentMood, setCurrentMood] = useState('neutral');\n\n  // Get the days of the week (Mon to Sun) where the current day(the day the user is viewing the website) belongs\n  const getWeekDates = () => {\n    const monday = startOfWeek(new Date(), { weekStartsOn: 1 }); // Return the start of a week for the given date, week starts on Monday\n    return Array.from({ length: 7 }, (_, dayIndex) => addDays(monday, dayIndex));\n  };\n\n  // Format the dates for easy reading\n  const toLocalDateString = date => format(date, 'yyyy-MM-dd');\n\n  useEffect(() => {\n    if (!user) return;\n\n    // Retrieve the journal entries of the current user.\n    // Note: Entries are retrieved only for the last 30 days and for the logged user.\n    // This functionality is handled by the Django endpoint + sessions.\n    const fetchEntries = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/journal/entries/`, {\n          credentials: 'include',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            'X-CSRFToken': getCookie('csrftoken'),\n          },\n        });\n        const data = await response.json();\n        setEntries(data); // Store fetched entries to \"entries\" useState([]) array\n      } catch (error) {\n        console.error('Error fetching entries:', error);\n      }\n    };\n\n    fetchEntries();\n  }, [user]);\n\n  const handleSave = async (date) => {\n    const dateStr = toLocalDateString(date); // Get the date of the entry we're trying to store\n    const textarea = document.querySelector(`textarea[data-date=\"${dateStr}\"]`); // Get the text from textarea\n    const text = textarea?.value || ''; // To prevent null in text area after saving\n    const existingEntry = entries.find(e => e.date === dateStr); // Check if the date of that entry has already one entry stored in the DB\n\n    // When pressing \"Save\" to store the entry to the DB, we check the fetched\n    // entries to see if we stored the entry, of that specific date, previously to the DB.\n    // Basically:\n    // If the entry exists in the DB -> Edit the entry with PUT\n    // If the entry doesn't exist in the DB -> Create a new entry with POST\n    try {\n      let response;\n    \n      if (existingEntry) {\n        // Update existing entry (PATCH)\n        response = await fetch(`${API_BASE_URL}/journal/entries/${existingEntry.id}/update/`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': getCookie('csrftoken'),\n          },\n          credentials: 'include',\n          body: JSON.stringify({ mood: currentMood, text }),\n        });\n      } else {\n        // Create new entry (POST)\n        response = await fetch(`${API_BASE_URL}/journal/entries/create/`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': getCookie('csrftoken'),\n          },\n          credentials: 'include',\n          body: JSON.stringify({ date: dateStr, mood: currentMood, text }),\n        });\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const savedEntry = await response.json();\n      \n      // Again, if the entry already existed in the DB, we check our\n      // entries array and update it (if the entry existed) or append it if the entry is new\n      setEntries(prev =>\n        existingEntry\n          ? prev.map(e => (e.id === savedEntry.id ? savedEntry : e))\n          : [savedEntry, ...prev]\n      );\n\n      setEditingDate(null); // Finish editing the entry text\n    } catch (error) {\n      console.error('Error saving entry:', error);\n    }\n  };\n\n  const handleDeleteEntry = async (entryId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/journal/entries/${entryId}/delete/`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken'),\n        },\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        setEntries(prev => prev.filter(e => e.id !== entryId));\n        if (editingDate) setEditingDate(null);\n      }\n    } catch (error) {\n      console.error('Error deleting entry:', error);\n    }\n  };\n\n  const startEditing = (date, entry) => {\n    setEditingDate(format(date, 'yyyy-MM-dd'));\n    setCurrentMood(entry?.mood || 'neutral');\n  };\n\n  return (\n    <div className=\"journal-page-wrapper\">\n    <div className=\"journal-container\">\n      <h1 style={{ color: \"#2F5D46\" }}>Tu Diario Mental</h1>\n\n      <div className=\"view-toggle\">\n        <button \n          className={viewMode === 'week' ? 'active' : ''}\n          onClick={() => setViewMode('week')}\n        >\n          Semanal\n        </button>\n        <button \n          className={viewMode === 'calendar' ? 'active' : ''}\n          onClick={() => setViewMode('calendar')}\n        >\n          Calendario\n        </button>\n      </div>\n\n      {viewMode === 'week' && (\n        <WeekView\n          entries={Array.isArray(entries) ? entries : []} \n          weekDates={getWeekDates()}\n          editingDate={editingDate}\n          currentMood={currentMood}\n          setCurrentMood={setCurrentMood}\n          handleSave={handleSave}\n          startEditing={startEditing}\n          handleDeleteEntry={handleDeleteEntry}\n          setEditingDate={setEditingDate}\n        />\n      )}\n\n      {viewMode === 'calendar' && (\n        <CalendarView\n          entries={entries}\n          selectedDate={selectedDate}\n          setSelectedDate={setSelectedDate}\n        />\n      )}\n    </div>\n    </div>\n  );\n}\n\nexport default JournalPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}